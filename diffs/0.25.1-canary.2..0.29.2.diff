diff --git a/BlitzDiffApp/app/auth/auth-utils.ts b/BlitzDiffApp/app/auth/auth-utils.ts
index 90db006d1..c0e8a2d82 100644
--- a/BlitzDiffApp/app/auth/auth-utils.ts
+++ b/BlitzDiffApp/app/auth/auth-utils.ts
@@ -1,37 +1,16 @@
-import { AuthenticationError } from "blitz"
-import SecurePassword from "secure-password"
+import { SecurePassword, AuthenticationError } from "blitz"
 import db from "db"
 
-const SP = new SecurePassword()
-
-export const hashPassword = async (password: string) => {
-  const hashedBuffer = await SP.hash(Buffer.from(password))
-  return hashedBuffer.toString("base64")
-}
-export const verifyPassword = async (hashedPassword: string, password: string) => {
-  try {
-    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, "base64"))
-  } catch (error) {
-    console.error(error)
-    return false
-  }
-}
-
 export const authenticateUser = async (email: string, password: string) => {
-  const user = await db.user.findOne({ where: { email: email.toLowerCase() } })
+  const user = await db.user.findFirst({ where: { email } })
+  if (!user) throw new AuthenticationError()
 
-  if (!user || !user.hashedPassword) throw new AuthenticationError()
+  const result = await SecurePassword.verify(user.hashedPassword, password)
 
-  switch (await verifyPassword(user.hashedPassword, password)) {
-    case SecurePassword.VALID:
-      break
-    case SecurePassword.VALID_NEEDS_REHASH:
-      // Upgrade hashed password with a more secure hash
-      const improvedHash = await hashPassword(password)
-      await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })
-      break
-    default:
-      throw new AuthenticationError()
+  if (result === SecurePassword.VALID_NEEDS_REHASH) {
+    // Upgrade hashed password with a more secure hash
+    const improvedHash = await SecurePassword.hash(password)
+    await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })
   }
 
   const { hashedPassword, ...rest } = user
diff --git a/BlitzDiffApp/app/auth/mutations/signup.ts b/BlitzDiffApp/app/auth/mutations/signup.ts
index 65895fe0a..d4b152db4 100644
--- a/BlitzDiffApp/app/auth/mutations/signup.ts
+++ b/BlitzDiffApp/app/auth/mutations/signup.ts
@@ -1,13 +1,12 @@
-import { Ctx } from "blitz"
+import { Ctx, SecurePassword } from "blitz"
 import db from "db"
-import { hashPassword } from "app/auth/auth-utils"
 import { SignupInput, SignupInputType } from "app/auth/validations"
 
 export default async function signup(input: SignupInputType, { session }: Ctx) {
   // This throws an error if input is invalid
   const { email, password } = SignupInput.parse(input)
 
-  const hashedPassword = await hashPassword(password)
+  const hashedPassword = await SecurePassword.hash(password)
   const user = await db.user.create({
     data: { email: email.toLowerCase(), hashedPassword, role: "user" },
     select: { id: true, name: true, email: true, role: true },
diff --git a/BlitzDiffApp/app/components/LabeledTextField.tsx b/BlitzDiffApp/app/components/LabeledTextField.tsx
index 84fd2b08f..a1235ffec 100644
--- a/BlitzDiffApp/app/components/LabeledTextField.tsx
+++ b/BlitzDiffApp/app/components/LabeledTextField.tsx
@@ -16,7 +16,9 @@ export const LabeledTextField = React.forwardRef<HTMLInputElement, LabeledTextFi
     const {
       input,
       meta: {touched, error, submitError, submitting},
-    } = useField(name)
+    } = useField(name, {
+      parse: props.type === "number" ? Number : undefined
+    })
 
     const normalizedError = Array.isArray(error) ? error.join(", ") : error || submitError
 
diff --git a/BlitzDiffApp/app/hooks/useCurrentUser.ts b/BlitzDiffApp/app/hooks/useCurrentUser.ts
index 47ebaf5ee..2938468c7 100644
--- a/BlitzDiffApp/app/hooks/useCurrentUser.ts
+++ b/BlitzDiffApp/app/hooks/useCurrentUser.ts
@@ -1,10 +1,7 @@
-import { useQuery, useSession } from "blitz"
+import { useQuery } from "blitz"
 import getCurrentUser from "app/users/queries/getCurrentUser"
 
 export const useCurrentUser = () => {
-  // We wouldn't have to useSession() here, but doing so improves perf on initial
-  // load since we can skip the getCurrentUser() request.
-  const session = useSession()
-  const [user] = useQuery(getCurrentUser, null, { enabled: !!session.userId })
-  return session.userId ? user : null
+  const [user] = useQuery(getCurrentUser, null)
+  return user
 }
diff --git a/BlitzDiffApp/app/pages/index.tsx b/BlitzDiffApp/app/pages/index.tsx
index a31fee46f..83d6d90dc 100644
--- a/BlitzDiffApp/app/pages/index.tsx
+++ b/BlitzDiffApp/app/pages/index.tsx
@@ -74,7 +74,7 @@ const Home: BlitzPage = () => {
           <code>blitz generate all project name:string</code>
         </pre>
         <pre>
-          <code>blitz db migrate</code>
+          <code>blitz prisma migrate dev --preview-feature</code>
         </pre>
         <div>
           <p>
diff --git a/BlitzDiffApp/app/users/queries/getCurrentUser.ts b/BlitzDiffApp/app/users/queries/getCurrentUser.ts
index da5748deb..9822e16bf 100644
--- a/BlitzDiffApp/app/users/queries/getCurrentUser.ts
+++ b/BlitzDiffApp/app/users/queries/getCurrentUser.ts
@@ -4,7 +4,7 @@ import db from "db"
 export default async function getCurrentUser(_ = null, { session }: Ctx) {
   if (!session.userId) return null
 
-  const user = await db.user.findOne({
+  const user = await db.user.findFirst({
     where: { id: session.userId },
     select: { id: true, name: true, email: true, role: true },
   })
diff --git a/BlitzDiffApp/blitz.config.js b/BlitzDiffApp/blitz.config.js
index 5d1e4f303..fa3795200 100644
--- a/BlitzDiffApp/blitz.config.js
+++ b/BlitzDiffApp/blitz.config.js
@@ -1,9 +1,9 @@
-const { sessionMiddleware, unstable_simpleRolesIsAuthorized } = require("@blitzjs/server")
+const { sessionMiddleware, simpleRolesIsAuthorized } = require("@blitzjs/server")
 
 module.exports = {
   middleware: [
     sessionMiddleware({
-      unstable_isAuthorized: unstable_simpleRolesIsAuthorized,
+      isAuthorized: simpleRolesIsAuthorized,
     }),
   ],
   /* Uncomment this to customize the webpack config
diff --git a/BlitzDiffApp/db/migrations/20210306013418_initial_migration/migration.sql b/BlitzDiffApp/db/migrations/20210306013418_initial_migration/migration.sql
new file mode 100644
index 000000000..f3028fb44
--- /dev/null
+++ b/BlitzDiffApp/db/migrations/20210306013418_initial_migration/migration.sql
@@ -0,0 +1,31 @@
+-- CreateTable
+CREATE TABLE "User" (
+    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" DATETIME NOT NULL,
+    "name" TEXT,
+    "email" TEXT NOT NULL,
+    "hashedPassword" TEXT,
+    "role" TEXT NOT NULL DEFAULT 'user'
+);
+
+-- CreateTable
+CREATE TABLE "Session" (
+    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" DATETIME NOT NULL,
+    "expiresAt" DATETIME,
+    "handle" TEXT NOT NULL,
+    "userId" INTEGER,
+    "hashedSessionToken" TEXT,
+    "antiCSRFToken" TEXT,
+    "publicData" TEXT,
+    "privateData" TEXT,
+    FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE
+);
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User.email_unique" ON "User"("email");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "Session.handle_unique" ON "Session"("handle");
diff --git a/BlitzDiffApp/package.json b/BlitzDiffApp/package.json
index f659cf960..cdcb71e60 100644
--- a/BlitzDiffApp/package.json
+++ b/BlitzDiffApp/package.json
@@ -3,7 +3,7 @@
   "version": "1.0.0",
   "scripts": {
     "start": "blitz start",
-    "studio": "blitz db studio",
+    "studio": "blitz prisma studio",
     "build": "blitz build",
     "lint": "eslint --ignore-path .gitignore --ext .js,.ts,.tsx .",
     "test": "jest",
@@ -31,13 +31,12 @@
     ]
   },
   "dependencies": {
-    "@prisma/cli": "2.18.0",
-    "@prisma/client": "2.18.0",
-    "blitz": "0.30.0-canary.15",
-    "react": "0.0.0-experimental-4ead6b530",
-    "react-dom": "0.0.0-experimental-4ead6b530",
-    "react-error-boundary": "2.3.2",
-    "secure-password": "4.0.0",
+    "@prisma/cli": "~2.14",
+    "@prisma/client": "~2.14",
+    "blitz": "0.31.1",
+    "react": "0.0.0-experimental-3310209d0",
+    "react-dom": "0.0.0-experimental-3310209d0",
+    "react-error-boundary": "3.1.1",
     "typescript": "4.2.3",
     "zod": "1.11.11",
     "final-form": "4.20.2",
@@ -48,13 +47,12 @@
     "@testing-library/react": "11.2.5",
     "@testing-library/react-hooks": "3.7.0",
     "@types/jest": "26.0.20",
-    "@types/react": "16.14.4",
-    "@types/secure-password": "3.1.0",
+    "@types/react": "17.0.2",
     "@typescript-eslint/eslint-plugin": "4.16.1",
     "@typescript-eslint/parser": "4.16.1",
     "babel-eslint": "10.1.0",
     "eslint": "7.21.0",
-    "eslint-config-react-app": "5.2.1",
+    "eslint-config-react-app": "6.0.0",
     "eslint-plugin-flowtype": "5.3.1",
     "eslint-plugin-import": "2.22.1",
     "eslint-plugin-jsx-a11y": "6.4.1",
@@ -64,7 +62,7 @@
     "jest": "26.6.3",
     "jest-environment-jsdom-fourteen": "1.0.1",
     "jest-watch-typeahead": "0.6.1",
-    "react-test-renderer": "16.14.0",
+    "react-test-renderer": "17.0.1",
     "lint-staged": "10.5.4",
     "prettier": "2.2.1",
     "pretty-quick": "3.1.0",
diff --git a/BlitzDiffApp/test/utils.tsx b/BlitzDiffApp/test/utils.tsx
index efdb66861..856e68186 100644
--- a/BlitzDiffApp/test/utils.tsx
+++ b/BlitzDiffApp/test/utils.tsx
@@ -70,6 +70,7 @@ export const mockRouter: BlitzRouter = {
   asPath: "/",
   params: {},
   query: {},
+  isReady: true,
   push: jest.fn(),
   replace: jest.fn(),
   reload: jest.fn(),
