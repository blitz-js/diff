diff --git a/BlitzDiffApp/.prettierignore b/BlitzDiffApp/.prettierignore
index ad8c486b6..c61fdf72d 100644
--- a/BlitzDiffApp/.prettierignore
+++ b/BlitzDiffApp/.prettierignore
@@ -3,5 +3,3 @@
 *.ico
 *.lock
 db/migrations
-.next
-.blitz
diff --git a/BlitzDiffApp/app/auth/auth-utils.ts b/BlitzDiffApp/app/auth/auth-utils.ts
index f5a851738..90db006d1 100644
--- a/BlitzDiffApp/app/auth/auth-utils.ts
+++ b/BlitzDiffApp/app/auth/auth-utils.ts
@@ -2,15 +2,15 @@ import { AuthenticationError } from "blitz"
 import SecurePassword from "secure-password"
 import db from "db"
 
-const SP = () => new SecurePassword()
+const SP = new SecurePassword()
 
 export const hashPassword = async (password: string) => {
-  const hashedBuffer = await SP().hash(Buffer.from(password))
+  const hashedBuffer = await SP.hash(Buffer.from(password))
   return hashedBuffer.toString("base64")
 }
 export const verifyPassword = async (hashedPassword: string, password: string) => {
   try {
-    return await SP().verify(Buffer.from(password), Buffer.from(hashedPassword, "base64"))
+    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, "base64"))
   } catch (error) {
     console.error(error)
     return false
@@ -18,7 +18,7 @@ export const verifyPassword = async (hashedPassword: string, password: string) =
 }
 
 export const authenticateUser = async (email: string, password: string) => {
-  const user = await db.user.findFirst({ where: { email: email.toLowerCase() } })
+  const user = await db.user.findOne({ where: { email: email.toLowerCase() } })
 
   if (!user || !user.hashedPassword) throw new AuthenticationError()
 
diff --git a/BlitzDiffApp/app/hooks/useCurrentUser.ts b/BlitzDiffApp/app/hooks/useCurrentUser.ts
index 2938468c7..47ebaf5ee 100644
--- a/BlitzDiffApp/app/hooks/useCurrentUser.ts
+++ b/BlitzDiffApp/app/hooks/useCurrentUser.ts
@@ -1,7 +1,10 @@
-import { useQuery } from "blitz"
+import { useQuery, useSession } from "blitz"
 import getCurrentUser from "app/users/queries/getCurrentUser"
 
 export const useCurrentUser = () => {
-  const [user] = useQuery(getCurrentUser, null)
-  return user
+  // We wouldn't have to useSession() here, but doing so improves perf on initial
+  // load since we can skip the getCurrentUser() request.
+  const session = useSession()
+  const [user] = useQuery(getCurrentUser, null, { enabled: !!session.userId })
+  return session.userId ? user : null
 }
diff --git a/BlitzDiffApp/app/users/queries/getCurrentUser.ts b/BlitzDiffApp/app/users/queries/getCurrentUser.ts
index 9822e16bf..da5748deb 100644
--- a/BlitzDiffApp/app/users/queries/getCurrentUser.ts
+++ b/BlitzDiffApp/app/users/queries/getCurrentUser.ts
@@ -4,7 +4,7 @@ import db from "db"
 export default async function getCurrentUser(_ = null, { session }: Ctx) {
   if (!session.userId) return null
 
-  const user = await db.user.findFirst({
+  const user = await db.user.findOne({
     where: { id: session.userId },
     select: { id: true, name: true, email: true, role: true },
   })
diff --git a/BlitzDiffApp/blitz.config.js b/BlitzDiffApp/blitz.config.js
index fa3795200..5d1e4f303 100644
--- a/BlitzDiffApp/blitz.config.js
+++ b/BlitzDiffApp/blitz.config.js
@@ -1,9 +1,9 @@
-const { sessionMiddleware, simpleRolesIsAuthorized } = require("@blitzjs/server")
+const { sessionMiddleware, unstable_simpleRolesIsAuthorized } = require("@blitzjs/server")
 
 module.exports = {
   middleware: [
     sessionMiddleware({
-      isAuthorized: simpleRolesIsAuthorized,
+      unstable_isAuthorized: unstable_simpleRolesIsAuthorized,
     }),
   ],
   /* Uncomment this to customize the webpack config
diff --git a/BlitzDiffApp/db/migrations/20210306154017-initial-migration/README.md b/BlitzDiffApp/db/migrations/20210306154017-initial-migration/README.md
deleted file mode 100644
index c1da3e28c..000000000
--- a/BlitzDiffApp/db/migrations/20210306154017-initial-migration/README.md
+++ /dev/null
@@ -1,87 +0,0 @@
-# Migration `20210306154017-initial-migration`
-
-This migration has been generated by Matthieu PETIT at 3/6/2021, 4:40:17 PM.
-You can check out the [state of the schema](./schema.prisma) after the migration.
-
-## Database Steps
-
-```sql
-CREATE TABLE "User" (
-    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
-    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
-    "updatedAt" DATETIME NOT NULL,
-    "name" TEXT,
-    "email" TEXT NOT NULL,
-    "hashedPassword" TEXT,
-    "role" TEXT NOT NULL DEFAULT 'user'
-)
-
-CREATE TABLE "Session" (
-    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
-    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
-    "updatedAt" DATETIME NOT NULL,
-    "expiresAt" DATETIME,
-    "handle" TEXT NOT NULL,
-    "userId" INTEGER,
-    "hashedSessionToken" TEXT,
-    "antiCSRFToken" TEXT,
-    "publicData" TEXT,
-    "privateData" TEXT,
-
-    FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE SET NULL ON UPDATE CASCADE
-)
-
-CREATE UNIQUE INDEX "User.email_unique" ON "User"("email")
-
-CREATE UNIQUE INDEX "Session.handle_unique" ON "Session"("handle")
-```
-
-## Changes
-
-```diff
-diff --git schema.prisma schema.prisma
-migration ..20210306154017-initial-migration
---- datamodel.dml
-+++ datamodel.dml
-@@ -1,0 +1,38 @@
-+// This is your Prisma schema file,
-+// learn more about it in the docs: https://pris.ly/d/prisma-schema
-+
-+datasource db {
-+  provider = "sqlite"
-+  url = "***"
-+}
-+
-+generator client {
-+  provider = "prisma-client-js"
-+}
-+
-+// --------------------------------------
-+
-+model User {
-+  id             Int       @default(autoincrement()) @id
-+  createdAt      DateTime  @default(now())
-+  updatedAt      DateTime  @updatedAt
-+  name           String?
-+  email          String    @unique
-+  hashedPassword String?
-+  role           String    @default("user")
-+  sessions       Session[]
-+}
-+
-+model Session {
-+  id                 Int       @default(autoincrement()) @id
-+  createdAt          DateTime  @default(now())
-+  updatedAt          DateTime  @updatedAt
-+  expiresAt          DateTime?
-+  handle             String    @unique
-+  user               User?     @relation(fields: [userId], references: [id])
-+  userId             Int?
-+  hashedSessionToken String?
-+  antiCSRFToken      String?
-+  publicData         String?
-+  privateData        String?
-+}
-```
-
-
diff --git a/BlitzDiffApp/db/migrations/20210306154017-initial-migration/schema.prisma b/BlitzDiffApp/db/migrations/20210306154017-initial-migration/schema.prisma
deleted file mode 100644
index c0ce11a35..000000000
--- a/BlitzDiffApp/db/migrations/20210306154017-initial-migration/schema.prisma
+++ /dev/null
@@ -1,38 +0,0 @@
-// This is your Prisma schema file,
-// learn more about it in the docs: https://pris.ly/d/prisma-schema
-
-datasource db {
-  provider = "sqlite"
-  url = "***"
-}
-
-generator client {
-  provider = "prisma-client-js"
-}
-
-// --------------------------------------
-
-model User {
-  id             Int       @default(autoincrement()) @id
-  createdAt      DateTime  @default(now())
-  updatedAt      DateTime  @updatedAt
-  name           String?
-  email          String    @unique
-  hashedPassword String?
-  role           String    @default("user")
-  sessions       Session[]
-}
-
-model Session {
-  id                 Int       @default(autoincrement()) @id
-  createdAt          DateTime  @default(now())
-  updatedAt          DateTime  @updatedAt
-  expiresAt          DateTime?
-  handle             String    @unique
-  user               User?     @relation(fields: [userId], references: [id])
-  userId             Int?
-  hashedSessionToken String?
-  antiCSRFToken      String?
-  publicData         String?
-  privateData        String?
-}
diff --git a/BlitzDiffApp/db/migrations/20210306154017-initial-migration/steps.json b/BlitzDiffApp/db/migrations/20210306154017-initial-migration/steps.json
deleted file mode 100644
index 0e8c23090..000000000
--- a/BlitzDiffApp/db/migrations/20210306154017-initial-migration/steps.json
+++ /dev/null
@@ -1,398 +0,0 @@
-{
-  "version": "0.3.14-fixed",
-  "steps": [
-    {
-      "tag": "CreateSource",
-      "source": "db"
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Source",
-        "source": "db"
-      },
-      "argument": "provider",
-      "value": "\"sqlite\""
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Source",
-        "source": "db"
-      },
-      "argument": "url",
-      "value": "\"***\""
-    },
-    {
-      "tag": "CreateModel",
-      "model": "User"
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "id",
-      "type": "Int",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "id"
-        },
-        "directive": "default"
-      }
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "id"
-        },
-        "directive": "default"
-      },
-      "argument": "",
-      "value": "autoincrement()"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "id"
-        },
-        "directive": "id"
-      }
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "createdAt",
-      "type": "DateTime",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "createdAt"
-        },
-        "directive": "default"
-      }
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "createdAt"
-        },
-        "directive": "default"
-      },
-      "argument": "",
-      "value": "now()"
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "updatedAt",
-      "type": "DateTime",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "updatedAt"
-        },
-        "directive": "updatedAt"
-      }
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "name",
-      "type": "String",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "email",
-      "type": "String",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "email"
-        },
-        "directive": "unique"
-      }
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "hashedPassword",
-      "type": "String",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "role",
-      "type": "String",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "role"
-        },
-        "directive": "default"
-      }
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "User",
-          "field": "role"
-        },
-        "directive": "default"
-      },
-      "argument": "",
-      "value": "\"user\""
-    },
-    {
-      "tag": "CreateField",
-      "model": "User",
-      "field": "sessions",
-      "type": "Session",
-      "arity": "List"
-    },
-    {
-      "tag": "CreateModel",
-      "model": "Session"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "id",
-      "type": "Int",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "id"
-        },
-        "directive": "default"
-      }
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "id"
-        },
-        "directive": "default"
-      },
-      "argument": "",
-      "value": "autoincrement()"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "id"
-        },
-        "directive": "id"
-      }
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "createdAt",
-      "type": "DateTime",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "createdAt"
-        },
-        "directive": "default"
-      }
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "createdAt"
-        },
-        "directive": "default"
-      },
-      "argument": "",
-      "value": "now()"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "updatedAt",
-      "type": "DateTime",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "updatedAt"
-        },
-        "directive": "updatedAt"
-      }
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "expiresAt",
-      "type": "DateTime",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "handle",
-      "type": "String",
-      "arity": "Required"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "handle"
-        },
-        "directive": "unique"
-      }
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "user",
-      "type": "User",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateDirective",
-      "location": {
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "user"
-        },
-        "directive": "relation"
-      }
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "user"
-        },
-        "directive": "relation"
-      },
-      "argument": "fields",
-      "value": "[userId]"
-    },
-    {
-      "tag": "CreateArgument",
-      "location": {
-        "tag": "Directive",
-        "path": {
-          "tag": "Field",
-          "model": "Session",
-          "field": "user"
-        },
-        "directive": "relation"
-      },
-      "argument": "references",
-      "value": "[id]"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "userId",
-      "type": "Int",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "hashedSessionToken",
-      "type": "String",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "antiCSRFToken",
-      "type": "String",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "publicData",
-      "type": "String",
-      "arity": "Optional"
-    },
-    {
-      "tag": "CreateField",
-      "model": "Session",
-      "field": "privateData",
-      "type": "String",
-      "arity": "Optional"
-    }
-  ]
-}
\ No newline at end of file
diff --git a/BlitzDiffApp/db/migrations/migrate.lock b/BlitzDiffApp/db/migrations/migrate.lock
deleted file mode 100644
index e37a48359..000000000
--- a/BlitzDiffApp/db/migrations/migrate.lock
+++ /dev/null
@@ -1,3 +0,0 @@
-# Prisma Migrate lockfile v1
-
-20210306154017-initial-migration
\ No newline at end of file
diff --git a/BlitzDiffApp/package.json b/BlitzDiffApp/package.json
index 3caa9a949..f659cf960 100644
--- a/BlitzDiffApp/package.json
+++ b/BlitzDiffApp/package.json
@@ -31,8 +31,8 @@
     ]
   },
   "dependencies": {
-    "@prisma/cli": "~2.12",
-    "@prisma/client": "~2.12",
+    "@prisma/cli": "2.18.0",
+    "@prisma/client": "2.18.0",
     "blitz": "0.30.0-canary.15",
     "react": "0.0.0-experimental-4ead6b530",
     "react-dom": "0.0.0-experimental-4ead6b530",
