diff --git a/BlitzDiffApp/.env b/BlitzDiffApp/.env
index 9e261f121..5cd1aca53 100644
--- a/BlitzDiffApp/.env
+++ b/BlitzDiffApp/.env
@@ -1,2 +1,3 @@
 # This env file should be checked into source control
-# This is the place for default values that should be used in all environments
+# This is the place for default values for all environments
+# Values in `.env.local` and `.env.production` will override these values
diff --git a/BlitzDiffApp/.eslintrc.js b/BlitzDiffApp/.eslintrc.js
index a92e4157f..f845b10d5 100644
--- a/BlitzDiffApp/.eslintrc.js
+++ b/BlitzDiffApp/.eslintrc.js
@@ -1,13 +1,3 @@
 module.exports = {
-  env: {
-    es2020: true,
-  },
-  extends: ['react-app', 'plugin:jsx-a11y/recommended'],
-  plugins: ['jsx-a11y'],
-  rules: {
-    "import/no-anonymous-default-export": "error",
-    'import/no-webpack-loader-syntax': 'off',
-    'react/react-in-jsx-scope': 'off', // React is always in scope with Blitz
-    'jsx-a11y/anchor-is-valid': 'off', //Doesn't play well with Blitz/Next <Link> usage
-  },
+  extends: ["blitz"],
 }
diff --git a/BlitzDiffApp/.gitignore b/BlitzDiffApp/.gitignore
index 3665bf5ce..70053f9b5 100644
--- a/BlitzDiffApp/.gitignore
+++ b/BlitzDiffApp/.gitignore
@@ -11,6 +11,7 @@ web_modules/
 /.blitz/
 /.next/
 *.sqlite
+*.sqlite-journal
 .now
 .blitz-console-history
 blitz-log.log
diff --git a/BlitzDiffApp/.npmrc b/BlitzDiffApp/.npmrc
index cffe8cdef..1b78f1c6f 100644
--- a/BlitzDiffApp/.npmrc
+++ b/BlitzDiffApp/.npmrc
@@ -1 +1,2 @@
 save-exact=true
+legacy-peer-deps=true
diff --git a/BlitzDiffApp/README.md b/BlitzDiffApp/README.md
index 89962a39a..e269be399 100644
--- a/BlitzDiffApp/README.md
+++ b/BlitzDiffApp/README.md
@@ -9,7 +9,7 @@ This is a [Blitz.js](https://github.com/blitz-js/blitz) app.
 Run your app in the development mode.
 
 ```
-blitz start
+blitz dev
 ```
 
 Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
@@ -47,12 +47,13 @@ Blitz comes with a powerful CLI that is designed to make development easy and fa
 ```
   blitz [COMMAND]
 
+  dev       Start a development server
   build     Create a production build
-  console   Run the Blitz console REPL
-  db        Run database commands
+  start     Start a production server
+  prisma    Run prisma commands
   generate  Generate new files for your Blitz project
+  console   Run the Blitz console REPL
   help      display help for blitz
-  start     Start a development server
   test      Run project tests
 ```
 
@@ -60,81 +61,87 @@ You can read more about it on the [CLI Overview](https://blitzjs.com/docs/cli-ov
 
 ## What's included?
 
-Here is the structure of your app.
+Here is the starting structure of your app.
 
 ```
 BlitzDiffApp
-├── app
-│   |── auth
-│   │   ├── components
-│   │   │   └── LoginForm.tsx
-│   │   ├── mutations
-│   │   │   ├── login.ts
-│   │   │   ├── logout.ts
-│   │   │   └── signup.ts
-│   │   └── pages
-│   │       ├── login.tsx
-│   │       └── signup.tsx
-│   ├── auth-utils.ts
-│   ├── validations.ts
-│   ├── components
-│   │   ├── Form.tsx
-│   │   └── LabeledTextField.tsx
-│   ├── hooks
-│   │   └── useCurrentUser.ts
-│   ├── layouts
-│   │   └── Layout.tsx
-│   │── pages
-│   │   ├── _app.tsx
-│   │   ├── _document.tsx
-│   │   ├── 404.tsx
-│   │   ├── index.tsx
-│   │   └── index.test.tsx
-│   └── users
-│   │   └── queries
-│   │       └── getCurrentUser.ts
-├── db
-│   ├── migrations
+├── app/
+│   ├── api/
+│   ├── auth/
+│   │   ├── components/
+│   │   │   ├── LoginForm.tsx
+│   │   │   └── SignupForm.tsx
+│   │   ├── mutations/
+│   │   │   ├── changePassword.ts
+│   │   │   ├── forgotPassword.test.ts
+│   │   │   ├── forgotPassword.ts
+│   │   │   ├── login.ts
+│   │   │   ├── logout.ts
+│   │   │   ├── resetPassword.test.ts
+│   │   │   ├── resetPassword.ts
+│   │   │   └── signup.ts
+│   │   ├── pages/
+│   │   │   ├── forgot-password.tsx
+│   │   │   ├── login.tsx
+│   │   │   ├── reset-password.tsx
+│   │   │   └── signup.tsx
+│   │   └── validations.ts
+│   ├── core/
+│   │   ├── components/
+│   │   │   ├── Form.tsx
+│   │   │   └── LabeledTextField.tsx
+│   │   ├── hooks/
+│   │   │   └── useCurrentUser.ts
+│   │   └── layouts/
+│   │       └── Layout.tsx
+│   ├── pages/
+│   │   ├── 404.tsx
+│   │   ├── _app.tsx
+│   │   ├── _document.tsx
+│   │   ├── index.test.tsx
+│   │   └── index.tsx
+│   └── users/
+│       └── queries/
+│           └── getCurrentUser.ts
+├── db/
 │   ├── index.ts
-│   └── schema.prisma
-├── integrations
-├── node_modules
-├── public
-│   ├── favicon.ico
+│   ├── schema.prisma
+│   └── seeds.ts
+├── integrations/
+├── mailers/
+│   └── forgotPasswordMailer.ts
+├── public/
+│   ├── favicon.ico*
 │   └── logo.png
-├── test
-│   ├── __mocks__
-│   │       └── fileMock.js
+├── test/
 │   ├── setup.ts
 │   └── utils.tsx
-├── utils
-├── .env
-├── .eslintrc.js
-├── .gitignore
-├── .npmrc
-├── .prettierignore
+├── README.md
 ├── babel.config.js
 ├── blitz.config.js
 ├── jest.config.js
 ├── package.json
-├── README.md
 ├── tsconfig.json
+├── types.d.ts
+├── types.ts
 └── yarn.lock
 ```
 
 These files are:
 
-- The `app/` directory is a container for most of your project. This is where you’ll put any pages or API routes.
+- The `app/` folder is a container for most of your project. This is where you’ll put any pages or API routes.
 
-- `db`/ is where your database configuration goes. If you’re writing models or checking migrations, this is where to go.
+- `db/` is where your database configuration goes. If you’re writing models or checking migrations, this is where to go.
 
-- `node_modules/` is where your “dependencies” are stored. This directory is updated by your package manager, so you don’t have to worry too much about it.
+- `public/` is a folder where you will put any static assets. If you have images, files, or videos which you want to use in your app, this is where to put them.
 
-- `public/` is a directory where you will put any static assets. If you have images, files, or videos which you want to use in your app, this is where to put them.
+- `integrations/` is a folder to put all third-party integrations like with Stripe, Sentry, etc.
 
-- `test/` is a directory where you can put your unit and integration tests.
+- `test/` is a folder where you can put test utilities and integration tests.
 
-- `utils/` is a good place to put any shared utility files which you might use across different sections of your app.
+- `package.json` contains information about your dependencies and devDependencies. If you’re using a tool like `npm` or `yarn`, you won’t have to worry about this much.
+
+- `tsconfig.json` is our recommended setup for TypeScript.
 
 - `.babelrc.js`, `.env`, etc. ("dotfiles") are configuration files for various bits of JavaScript tooling.
 
@@ -142,29 +149,17 @@ These files are:
 
 - `jest.config.js` contains config for Jest tests. You can [customize it if needed](https://jestjs.io/docs/en/configuration).
 
-- `package.json` contains information about your dependencies and devDependencies. If you’re using a tool like `npm` or `yarn`, you won’t have to worry about this much.
-
-- `tsconfig.json` is our recommended setup for TypeScript.
-
 You can read more about it in the [File Structure](https://blitzjs.com/docs/file-structure) section of the documentation.
 
 ## Learn more
 
 Read the [Blitz.js Documentation](https://blitzjs.com/docs/getting-started) to learn more.
 
-### The Blitz.js Manifesto
-
-Read the [Blitz Manifesto](https://blitzjs.com/docs/manifesto) to learn the Blitz foundational principles.
-
-Blitz is built on Next.js. For more info on this see [Why use Blitz instead of Next.js](https://blitzjs.com/docs/why-blitz)
-
-## Get in touch
-
 The Blitz community is warm, safe, diverse, inclusive, and fun! Feel free to reach out to us in any of our communication channels.
 
 - [Website](https://blitzjs.com/)
-- [Slack](https://slack.blitzjs.com/)
+- [Discord](https://discord.blitzjs.com/)
 - [Report an issue](https://github.com/blitz-js/blitz/issues/new/choose)
 - [Forum discussions](https://github.com/blitz-js/blitz/discussions)
-- [Sponsors and donations](https://github.com/blitz-js/blitz#sponsors-and-donations)
-- [Contributing Guide](https://blitzjs.com/docs/contributing)
+- [How to Contribute](https://blitzjs.com/docs/contributing)
+- [Sponsor or donate](https://github.com/blitz-js/blitz#sponsors-and-donations)
diff --git a/BlitzDiffApp/app/components/.keep b/BlitzDiffApp/app/api/.keep
similarity index 100%
rename from BlitzDiffApp/app/components/.keep
rename to BlitzDiffApp/app/api/.keep
diff --git a/BlitzDiffApp/app/auth/auth-utils.ts b/BlitzDiffApp/app/auth/auth-utils.ts
deleted file mode 100644
index c0e8a2d82..000000000
--- a/BlitzDiffApp/app/auth/auth-utils.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-import { SecurePassword, AuthenticationError } from "blitz"
-import db from "db"
-
-export const authenticateUser = async (email: string, password: string) => {
-  const user = await db.user.findFirst({ where: { email } })
-  if (!user) throw new AuthenticationError()
-
-  const result = await SecurePassword.verify(user.hashedPassword, password)
-
-  if (result === SecurePassword.VALID_NEEDS_REHASH) {
-    // Upgrade hashed password with a more secure hash
-    const improvedHash = await SecurePassword.hash(password)
-    await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })
-  }
-
-  const { hashedPassword, ...rest } = user
-  return rest
-}
diff --git a/BlitzDiffApp/app/auth/components/LoginForm.tsx b/BlitzDiffApp/app/auth/components/LoginForm.tsx
index f1864e880..8861cf009 100644
--- a/BlitzDiffApp/app/auth/components/LoginForm.tsx
+++ b/BlitzDiffApp/app/auth/components/LoginForm.tsx
@@ -1,9 +1,8 @@
-import React from "react"
 import { AuthenticationError, Link, useMutation } from "blitz"
-import { LabeledTextField } from "app/components/LabeledTextField"
-import { Form, FORM_ERROR } from "app/components/Form"
+import { LabeledTextField } from "app/core/components/LabeledTextField"
+import { Form, FORM_ERROR } from "app/core/components/Form"
 import login from "app/auth/mutations/login"
-import { LoginInput } from "app/auth/validations"
+import { Login } from "app/auth/validations"
 
 type LoginFormProps = {
   onSuccess?: () => void
@@ -18,7 +17,7 @@ export const LoginForm = (props: LoginFormProps) => {
 
       <Form
         submitText="Login"
-        schema={LoginInput}
+        schema={Login}
         initialValues={{ email: "", password: "" }}
         onSubmit={async (values) => {
           try {
@@ -38,6 +37,11 @@ export const LoginForm = (props: LoginFormProps) => {
       >
         <LabeledTextField name="email" label="Email" placeholder="Email" />
         <LabeledTextField name="password" label="Password" placeholder="Password" type="password" />
+        <div>
+          <Link href="/forgot-password">
+            <a>Forgot your password?</a>
+          </Link>
+        </div>
       </Form>
 
       <div style={{ marginTop: "1rem" }}>
diff --git a/BlitzDiffApp/app/auth/components/SignupForm.tsx b/BlitzDiffApp/app/auth/components/SignupForm.tsx
index 185dfdacb..7362e35d0 100644
--- a/BlitzDiffApp/app/auth/components/SignupForm.tsx
+++ b/BlitzDiffApp/app/auth/components/SignupForm.tsx
@@ -1,9 +1,8 @@
-import React from "react"
 import { useMutation } from "blitz"
-import { LabeledTextField } from "app/components/LabeledTextField"
-import { Form, FORM_ERROR } from "app/components/Form"
+import { LabeledTextField } from "app/core/components/LabeledTextField"
+import { Form, FORM_ERROR } from "app/core/components/Form"
 import signup from "app/auth/mutations/signup"
-import { SignupInput } from "app/auth/validations"
+import { Signup } from "app/auth/validations"
 
 type SignupFormProps = {
   onSuccess?: () => void
@@ -18,7 +17,7 @@ export const SignupForm = (props: SignupFormProps) => {
 
       <Form
         submitText="Create Account"
-        schema={SignupInput}
+        schema={Signup}
         initialValues={{ email: "", password: "" }}
         onSubmit={async (values) => {
           try {
diff --git a/BlitzDiffApp/app/auth/mutations/changePassword.ts b/BlitzDiffApp/app/auth/mutations/changePassword.ts
new file mode 100644
index 000000000..5cc49a9d7
--- /dev/null
+++ b/BlitzDiffApp/app/auth/mutations/changePassword.ts
@@ -0,0 +1,23 @@
+import { NotFoundError, SecurePassword, resolver } from "blitz"
+import db from "db"
+import { authenticateUser } from "./login"
+import { ChangePassword } from "../validations"
+
+export default resolver.pipe(
+  resolver.zod(ChangePassword),
+  resolver.authorize(),
+  async ({ currentPassword, newPassword }, ctx) => {
+    const user = await db.user.findFirst({ where: { id: ctx.session.userId! } })
+    if (!user) throw new NotFoundError()
+
+    await authenticateUser(user.email, currentPassword)
+
+    const hashedPassword = await SecurePassword.hash(newPassword)
+    await db.user.update({
+      where: { id: user.id },
+      data: { hashedPassword },
+    })
+
+    return true
+  }
+)
diff --git a/BlitzDiffApp/app/auth/mutations/forgotPassword.test.ts b/BlitzDiffApp/app/auth/mutations/forgotPassword.test.ts
new file mode 100644
index 000000000..d5d0098f9
--- /dev/null
+++ b/BlitzDiffApp/app/auth/mutations/forgotPassword.test.ts
@@ -0,0 +1,56 @@
+import { hash256, Ctx } from "blitz"
+import forgotPassword from "./forgotPassword"
+import db from "db"
+import previewEmail from "preview-email"
+
+beforeEach(async () => {
+  await db.$reset()
+})
+
+const generatedToken = "plain-token"
+jest.mock("blitz", () => ({
+  ...jest.requireActual("blitz")!,
+  generateToken: () => generatedToken,
+}))
+jest.mock("preview-email", () => jest.fn())
+
+describe("forgotPassword mutation", () => {
+  it("does not throw error if user doesn't exist", async () => {
+    await expect(forgotPassword({ email: "no-user@email.com" }, {} as Ctx)).resolves.not.toThrow()
+  })
+
+  it("works correctly", async () => {
+    // Create test user
+    const user = await db.user.create({
+      data: {
+        email: "user@example.com",
+        tokens: {
+          // Create old token to ensure it's deleted
+          create: {
+            type: "RESET_PASSWORD",
+            hashedToken: "token",
+            expiresAt: new Date(),
+            sentTo: "user@example.com",
+          },
+        },
+      },
+      include: { tokens: true },
+    })
+
+    // Invoke the mutation
+    await forgotPassword({ email: user.email }, {} as Ctx)
+
+    const tokens = await db.token.findMany({ where: { userId: user.id } })
+    const token = tokens[0]
+
+    // delete's existing tokens
+    expect(tokens.length).toBe(1)
+
+    expect(token.id).not.toBe(user.tokens[0].id)
+    expect(token.type).toBe("RESET_PASSWORD")
+    expect(token.sentTo).toBe(user.email)
+    expect(token.hashedToken).toBe(hash256(generatedToken))
+    expect(token.expiresAt > new Date()).toBe(true)
+    expect(previewEmail).toBeCalled()
+  })
+})
diff --git a/BlitzDiffApp/app/auth/mutations/forgotPassword.ts b/BlitzDiffApp/app/auth/mutations/forgotPassword.ts
new file mode 100644
index 000000000..1cbf2a33c
--- /dev/null
+++ b/BlitzDiffApp/app/auth/mutations/forgotPassword.ts
@@ -0,0 +1,41 @@
+import { resolver, generateToken, hash256 } from "blitz"
+import db from "db"
+import { forgotPasswordMailer } from "mailers/forgotPasswordMailer"
+import { ForgotPassword } from "../validations"
+
+const RESET_PASSWORD_TOKEN_EXPIRATION_IN_HOURS = 4
+
+export default resolver.pipe(resolver.zod(ForgotPassword), async ({ email }) => {
+  // 1. Get the user
+  const user = await db.user.findFirst({ where: { email: email.toLowerCase() } })
+
+  // 2. Generate the token and expiration date.
+  const token = generateToken()
+  const hashedToken = hash256(token)
+  const expiresAt = new Date()
+  expiresAt.setHours(expiresAt.getHours() + RESET_PASSWORD_TOKEN_EXPIRATION_IN_HOURS)
+
+  // 3. If user with this email was found
+  if (user) {
+    // 4. Delete any existing password reset tokens
+    await db.token.deleteMany({ where: { type: "RESET_PASSWORD", userId: user.id } })
+    // 5. Save this new token in the database.
+    await db.token.create({
+      data: {
+        user: { connect: { id: user.id } },
+        type: "RESET_PASSWORD",
+        expiresAt,
+        hashedToken,
+        sentTo: user.email,
+      },
+    })
+    // 6. Send the email
+    await forgotPasswordMailer({ to: user.email, token }).send()
+  } else {
+    // 7. If no user found wait the same time so attackers can't tell the difference
+    await new Promise((resolve) => setTimeout(resolve, 750))
+  }
+
+  // 8. Return the same result whether a password reset email was sent or not
+  return
+})
diff --git a/BlitzDiffApp/app/auth/mutations/login.ts b/BlitzDiffApp/app/auth/mutations/login.ts
index c6ddf5ac3..b155223a2 100644
--- a/BlitzDiffApp/app/auth/mutations/login.ts
+++ b/BlitzDiffApp/app/auth/mutations/login.ts
@@ -1,15 +1,29 @@
-import { Ctx } from "blitz"
-import { authenticateUser } from "app/auth/auth-utils"
-import { LoginInput, LoginInputType } from "../validations"
+import { resolver, SecurePassword, AuthenticationError } from "blitz"
+import db from "db"
+import { Login } from "../validations"
+import { Role } from "types"
 
-export default async function login(input: LoginInputType, { session }: Ctx) {
-  // This throws an error if input is invalid
-  const { email, password } = LoginInput.parse(input)
+export const authenticateUser = async (email: string, password: string) => {
+  const user = await db.user.findFirst({ where: { email } })
+  if (!user) throw new AuthenticationError()
 
+  const result = await SecurePassword.verify(user.hashedPassword, password)
+
+  if (result === SecurePassword.VALID_NEEDS_REHASH) {
+    // Upgrade hashed password with a more secure hash
+    const improvedHash = await SecurePassword.hash(password)
+    await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })
+  }
+
+  const { hashedPassword, ...rest } = user
+  return rest
+}
+
+export default resolver.pipe(resolver.zod(Login), async ({ email, password }, ctx) => {
   // This throws an error if credentials are invalid
   const user = await authenticateUser(email, password)
 
-  await session.create({ userId: user.id, roles: [user.role] })
+  await ctx.session.$create({ userId: user.id, role: user.role as Role })
 
   return user
-}
+})
diff --git a/BlitzDiffApp/app/auth/mutations/logout.ts b/BlitzDiffApp/app/auth/mutations/logout.ts
index c61ef86d0..c2f2fefd8 100644
--- a/BlitzDiffApp/app/auth/mutations/logout.ts
+++ b/BlitzDiffApp/app/auth/mutations/logout.ts
@@ -1,5 +1,5 @@
 import { Ctx } from "blitz"
 
-export default async function logout(_: any, { session }: Ctx) {
-  return await session.revoke()
+export default async function logout(_: any, ctx: Ctx) {
+  return await ctx.session.$revoke()
 }
diff --git a/BlitzDiffApp/app/auth/mutations/resetPassword.test.ts b/BlitzDiffApp/app/auth/mutations/resetPassword.test.ts
new file mode 100644
index 000000000..d613716f5
--- /dev/null
+++ b/BlitzDiffApp/app/auth/mutations/resetPassword.test.ts
@@ -0,0 +1,82 @@
+import resetPassword from "./resetPassword"
+import db from "db"
+import { hash256, SecurePassword } from "blitz"
+
+beforeEach(async () => {
+  await db.$reset()
+})
+
+const mockCtx: any = {
+  session: {
+    $create: jest.fn,
+  },
+}
+
+describe("resetPassword mutation", () => {
+  it("works correctly", async () => {
+    expect(true).toBe(true)
+
+    // Create test user
+    const goodToken = "randomPasswordResetToken"
+    const expiredToken = "expiredRandomPasswordResetToken"
+    const future = new Date()
+    future.setHours(future.getHours() + 4)
+    const past = new Date()
+    past.setHours(past.getHours() - 4)
+
+    const user = await db.user.create({
+      data: {
+        email: "user@example.com",
+        tokens: {
+          // Create old token to ensure it's deleted
+          create: [
+            {
+              type: "RESET_PASSWORD",
+              hashedToken: hash256(expiredToken),
+              expiresAt: past,
+              sentTo: "user@example.com",
+            },
+            {
+              type: "RESET_PASSWORD",
+              hashedToken: hash256(goodToken),
+              expiresAt: future,
+              sentTo: "user@example.com",
+            },
+          ],
+        },
+      },
+      include: { tokens: true },
+    })
+
+    const newPassword = "newPassword"
+
+    // Non-existent token
+    await expect(
+      resetPassword({ token: "no-token", password: "", passwordConfirmation: "" }, mockCtx)
+    ).rejects.toThrowError()
+
+    // Expired token
+    await expect(
+      resetPassword(
+        { token: expiredToken, password: newPassword, passwordConfirmation: newPassword },
+        mockCtx
+      )
+    ).rejects.toThrowError()
+
+    // Good token
+    await resetPassword(
+      { token: goodToken, password: newPassword, passwordConfirmation: newPassword },
+      mockCtx
+    )
+
+    // Delete's the token
+    const numberOfTokens = await db.token.count({ where: { userId: user.id } })
+    expect(numberOfTokens).toBe(0)
+
+    // Updates user's password
+    const updatedUser = await db.user.findFirst({ where: { id: user.id } })
+    expect(await SecurePassword.verify(updatedUser!.hashedPassword, newPassword)).toBe(
+      SecurePassword.VALID
+    )
+  })
+})
diff --git a/BlitzDiffApp/app/auth/mutations/resetPassword.ts b/BlitzDiffApp/app/auth/mutations/resetPassword.ts
new file mode 100644
index 000000000..ece656d4c
--- /dev/null
+++ b/BlitzDiffApp/app/auth/mutations/resetPassword.ts
@@ -0,0 +1,47 @@
+import { resolver, SecurePassword, hash256 } from "blitz"
+import db from "db"
+import { ResetPassword } from "../validations"
+import login from "./login"
+
+export class ResetPasswordError extends Error {
+  name = "ResetPasswordError"
+  message = "Reset password link is invalid or it has expired."
+}
+
+export default resolver.pipe(resolver.zod(ResetPassword), async ({ password, token }, ctx) => {
+  // 1. Try to find this token in the database
+  const hashedToken = hash256(token)
+  const possibleToken = await db.token.findFirst({
+    where: { hashedToken, type: "RESET_PASSWORD" },
+    include: { user: true },
+  })
+
+  // 2. If token not found, error
+  if (!possibleToken) {
+    throw new ResetPasswordError()
+  }
+  const savedToken = possibleToken
+
+  // 3. Delete token so it can't be used again
+  await db.token.delete({ where: { id: savedToken.id } })
+
+  // 4. If token has expired, error
+  if (savedToken.expiresAt < new Date()) {
+    throw new ResetPasswordError()
+  }
+
+  // 5. Since token is valid, now we can update the user's password
+  const hashedPassword = await SecurePassword.hash(password)
+  const user = await db.user.update({
+    where: { id: savedToken.userId },
+    data: { hashedPassword },
+  })
+
+  // 6. Revoke all existing login sessions for this user
+  await db.session.deleteMany({ where: { userId: user.id } })
+
+  // 7. Now log the user in with the new credentials
+  await login({ email: user.email, password }, ctx)
+
+  return true
+})
diff --git a/BlitzDiffApp/app/auth/mutations/signup.ts b/BlitzDiffApp/app/auth/mutations/signup.ts
index d4b152db4..70d025ed6 100644
--- a/BlitzDiffApp/app/auth/mutations/signup.ts
+++ b/BlitzDiffApp/app/auth/mutations/signup.ts
@@ -1,18 +1,15 @@
-import { Ctx, SecurePassword } from "blitz"
+import { resolver, SecurePassword } from "blitz"
 import db from "db"
-import { SignupInput, SignupInputType } from "app/auth/validations"
-
-export default async function signup(input: SignupInputType, { session }: Ctx) {
-  // This throws an error if input is invalid
-  const { email, password } = SignupInput.parse(input)
+import { Signup } from "app/auth/validations"
+import { Role } from "types"
 
+export default resolver.pipe(resolver.zod(Signup), async ({ email, password }, ctx) => {
   const hashedPassword = await SecurePassword.hash(password)
   const user = await db.user.create({
-    data: { email: email.toLowerCase(), hashedPassword, role: "user" },
+    data: { email: email.toLowerCase(), hashedPassword, role: "USER" },
     select: { id: true, name: true, email: true, role: true },
   })
 
-  await session.create({ userId: user.id, roles: [user.role] })
-
+  await ctx.session.$create({ userId: user.id, role: user.role as Role })
   return user
-}
+})
diff --git a/BlitzDiffApp/app/auth/pages/forgot-password.tsx b/BlitzDiffApp/app/auth/pages/forgot-password.tsx
new file mode 100644
index 000000000..0d9a295ce
--- /dev/null
+++ b/BlitzDiffApp/app/auth/pages/forgot-password.tsx
@@ -0,0 +1,48 @@
+import { BlitzPage, useMutation } from "blitz"
+import Layout from "app/core/layouts/Layout"
+import { LabeledTextField } from "app/core/components/LabeledTextField"
+import { Form, FORM_ERROR } from "app/core/components/Form"
+import { ForgotPassword } from "app/auth/validations"
+import forgotPassword from "app/auth/mutations/forgotPassword"
+
+const ForgotPasswordPage: BlitzPage = () => {
+  const [forgotPasswordMutation, { isSuccess }] = useMutation(forgotPassword)
+
+  return (
+    <div>
+      <h1>Forgot your password?</h1>
+
+      {isSuccess ? (
+        <div>
+          <h2>Request Submitted</h2>
+          <p>
+            If your email is in our system, you will receive instructions to reset your password
+            shortly.
+          </p>
+        </div>
+      ) : (
+        <Form
+          submitText="Send Reset Password Instructions"
+          schema={ForgotPassword}
+          initialValues={{ email: "" }}
+          onSubmit={async (values) => {
+            try {
+              await forgotPasswordMutation(values)
+            } catch (error) {
+              return {
+                [FORM_ERROR]: "Sorry, we had an unexpected error. Please try again.",
+              }
+            }
+          }}
+        >
+          <LabeledTextField name="email" label="Email" placeholder="Email" />
+        </Form>
+      )}
+    </div>
+  )
+}
+
+ForgotPasswordPage.redirectAuthenticatedTo = "/"
+ForgotPasswordPage.getLayout = (page) => <Layout title="Forgot Your Password?">{page}</Layout>
+
+export default ForgotPasswordPage
diff --git a/BlitzDiffApp/app/auth/pages/login.tsx b/BlitzDiffApp/app/auth/pages/login.tsx
index 108da1fa9..45e76ff56 100644
--- a/BlitzDiffApp/app/auth/pages/login.tsx
+++ b/BlitzDiffApp/app/auth/pages/login.tsx
@@ -1,6 +1,5 @@
-import React from "react"
 import { useRouter, BlitzPage } from "blitz"
-import Layout from "app/layouts/Layout"
+import Layout from "app/core/layouts/Layout"
 import { LoginForm } from "app/auth/components/LoginForm"
 
 const LoginPage: BlitzPage = () => {
@@ -8,11 +7,17 @@ const LoginPage: BlitzPage = () => {
 
   return (
     <div>
-      <LoginForm onSuccess={() => router.push("/")} />
+      <LoginForm
+        onSuccess={() => {
+          const next = (router.query.next as string) ?? "/"
+          router.push(next)
+        }}
+      />
     </div>
   )
 }
 
+LoginPage.redirectAuthenticatedTo = "/"
 LoginPage.getLayout = (page) => <Layout title="Log In">{page}</Layout>
 
 export default LoginPage
diff --git a/BlitzDiffApp/app/auth/pages/reset-password.tsx b/BlitzDiffApp/app/auth/pages/reset-password.tsx
new file mode 100644
index 000000000..405d53814
--- /dev/null
+++ b/BlitzDiffApp/app/auth/pages/reset-password.tsx
@@ -0,0 +1,59 @@
+import { BlitzPage, useRouterQuery, Link, useMutation } from "blitz"
+import Layout from "app/core/layouts/Layout"
+import { LabeledTextField } from "app/core/components/LabeledTextField"
+import { Form, FORM_ERROR } from "app/core/components/Form"
+import { ResetPassword } from "app/auth/validations"
+import resetPassword from "app/auth/mutations/resetPassword"
+
+const ResetPasswordPage: BlitzPage = () => {
+  const query = useRouterQuery()
+  const [resetPasswordMutation, { isSuccess }] = useMutation(resetPassword)
+
+  return (
+    <div>
+      <h1>Set a New Password</h1>
+
+      {isSuccess ? (
+        <div>
+          <h2>Password Reset Successfully</h2>
+          <p>
+            Go to the <Link href="/">homepage</Link>
+          </p>
+        </div>
+      ) : (
+        <Form
+          submitText="Reset Password"
+          schema={ResetPassword.omit({ token: true })}
+          initialValues={{ password: "", passwordConfirmation: "" }}
+          onSubmit={async (values) => {
+            try {
+              await resetPasswordMutation({ ...values, token: query.token as string })
+            } catch (error) {
+              if (error.name === "ResetPasswordError") {
+                return {
+                  [FORM_ERROR]: error.message,
+                }
+              } else {
+                return {
+                  [FORM_ERROR]: "Sorry, we had an unexpected error. Please try again.",
+                }
+              }
+            }
+          }}
+        >
+          <LabeledTextField name="password" label="New Password" type="password" />
+          <LabeledTextField
+            name="passwordConfirmation"
+            label="Confirm New Password"
+            type="password"
+          />
+        </Form>
+      )}
+    </div>
+  )
+}
+
+ResetPasswordPage.redirectAuthenticatedTo = "/"
+ResetPasswordPage.getLayout = (page) => <Layout title="Reset Your Password">{page}</Layout>
+
+export default ResetPasswordPage
diff --git a/BlitzDiffApp/app/auth/pages/signup.tsx b/BlitzDiffApp/app/auth/pages/signup.tsx
index f8f050ed3..ea9de9cd1 100644
--- a/BlitzDiffApp/app/auth/pages/signup.tsx
+++ b/BlitzDiffApp/app/auth/pages/signup.tsx
@@ -1,6 +1,5 @@
-import React from "react"
 import { useRouter, BlitzPage } from "blitz"
-import Layout from "app/layouts/Layout"
+import Layout from "app/core/layouts/Layout"
 import { SignupForm } from "app/auth/components/SignupForm"
 
 const SignupPage: BlitzPage = () => {
@@ -13,6 +12,7 @@ const SignupPage: BlitzPage = () => {
   )
 }
 
+SignupPage.redirectAuthenticatedTo = "/"
 SignupPage.getLayout = (page) => <Layout title="Sign Up">{page}</Layout>
 
 export default SignupPage
diff --git a/BlitzDiffApp/app/auth/validations.ts b/BlitzDiffApp/app/auth/validations.ts
index 61756b681..6f4378992 100644
--- a/BlitzDiffApp/app/auth/validations.ts
+++ b/BlitzDiffApp/app/auth/validations.ts
@@ -1,13 +1,33 @@
 import * as z from "zod"
 
-export const SignupInput = z.object({
+const password = z.string().min(10).max(100)
+
+export const Signup = z.object({
   email: z.string().email(),
-  password: z.string().min(10).max(100),
+  password,
 })
-export type SignupInputType = z.infer<typeof SignupInput>
 
-export const LoginInput = z.object({
+export const Login = z.object({
   email: z.string().email(),
   password: z.string(),
 })
-export type LoginInputType = z.infer<typeof LoginInput>
+
+export const ForgotPassword = z.object({
+  email: z.string().email(),
+})
+
+export const ResetPassword = z
+  .object({
+    password: password,
+    passwordConfirmation: password,
+    token: z.string(),
+  })
+  .refine((data) => data.password === data.passwordConfirmation, {
+    message: "Passwords don't match",
+    path: ["passwordConfirmation"], // set the path of the error
+  })
+
+export const ChangePassword = z.object({
+  currentPassword: z.string(),
+  newPassword: password,
+})
diff --git a/BlitzDiffApp/app/components/Form.tsx b/BlitzDiffApp/app/core/components/Form.tsx
similarity index 77%
rename from BlitzDiffApp/app/components/Form.tsx
rename to BlitzDiffApp/app/core/components/Form.tsx
index 43b424a02..2951abf33 100644
--- a/BlitzDiffApp/app/components/Form.tsx
+++ b/BlitzDiffApp/app/core/components/Form.tsx
@@ -1,17 +1,18 @@
-import React, { ReactNode, PropsWithoutRef } from "react"
+import { ReactNode, PropsWithoutRef } from "react"
 import { Form as FinalForm, FormProps as FinalFormProps } from "react-final-form"
 import * as z from "zod"
 export { FORM_ERROR } from "final-form"
 
-type FormProps<S extends z.ZodType<any, any>> = {
+export interface FormProps<S extends z.ZodType<any, any>>
+  extends Omit<PropsWithoutRef<JSX.IntrinsicElements["form"]>, "onSubmit"> {
   /** All your form fields */
-  children: ReactNode
+  children?: ReactNode
   /** Text to display in the submit button */
-  submitText: string
+  submitText?: string
   schema?: S
   onSubmit: FinalFormProps<z.infer<S>>["onSubmit"]
   initialValues?: FinalFormProps<z.infer<S>>["initialValues"]
-} & Omit<PropsWithoutRef<JSX.IntrinsicElements["form"]>, "onSubmit">
+}
 
 export function Form<S extends z.ZodType<any, any>>({
   children,
@@ -44,9 +45,11 @@ export function Form<S extends z.ZodType<any, any>>({
             </div>
           )}
 
-          <button type="submit" disabled={submitting}>
-            {submitText}
-          </button>
+          {submitText && (
+            <button type="submit" disabled={submitting}>
+              {submitText}
+            </button>
+          )}
 
           <style global jsx>{`
             .form > * + * {
diff --git a/BlitzDiffApp/app/components/LabeledTextField.tsx b/BlitzDiffApp/app/core/components/LabeledTextField.tsx
similarity index 75%
rename from BlitzDiffApp/app/components/LabeledTextField.tsx
rename to BlitzDiffApp/app/core/components/LabeledTextField.tsx
index a1235ffec..0d8517b8c 100644
--- a/BlitzDiffApp/app/components/LabeledTextField.tsx
+++ b/BlitzDiffApp/app/core/components/LabeledTextField.tsx
@@ -1,5 +1,5 @@
-import React, {PropsWithoutRef} from "react"
-import {useField} from "react-final-form"
+import { forwardRef, PropsWithoutRef } from "react"
+import { useField } from "react-final-form"
 
 export interface LabeledTextFieldProps extends PropsWithoutRef<JSX.IntrinsicElements["input"]> {
   /** Field name. */
@@ -11,13 +11,13 @@ export interface LabeledTextFieldProps extends PropsWithoutRef<JSX.IntrinsicElem
   outerProps?: PropsWithoutRef<JSX.IntrinsicElements["div"]>
 }
 
-export const LabeledTextField = React.forwardRef<HTMLInputElement, LabeledTextFieldProps>(
-  ({name, label, outerProps, ...props}, ref) => {
+export const LabeledTextField = forwardRef<HTMLInputElement, LabeledTextFieldProps>(
+  ({ name, label, outerProps, ...props }, ref) => {
     const {
       input,
-      meta: {touched, error, submitError, submitting},
+      meta: { touched, error, submitError, submitting },
     } = useField(name, {
-      parse: props.type === "number" ? Number : undefined
+      parse: props.type === "number" ? Number : undefined,
     })
 
     const normalizedError = Array.isArray(error) ? error.join(", ") : error || submitError
@@ -30,7 +30,7 @@ export const LabeledTextField = React.forwardRef<HTMLInputElement, LabeledTextFi
         </label>
 
         {touched && normalizedError && (
-          <div role="alert" style={{color: "red"}}>
+          <div role="alert" style={{ color: "red" }}>
             {normalizedError}
           </div>
         )}
@@ -53,7 +53,7 @@ export const LabeledTextField = React.forwardRef<HTMLInputElement, LabeledTextFi
         `}</style>
       </div>
     )
-  },
+  }
 )
 
 export default LabeledTextField
diff --git a/BlitzDiffApp/app/hooks/useCurrentUser.ts b/BlitzDiffApp/app/core/hooks/useCurrentUser.ts
similarity index 100%
rename from BlitzDiffApp/app/hooks/useCurrentUser.ts
rename to BlitzDiffApp/app/core/hooks/useCurrentUser.ts
diff --git a/BlitzDiffApp/app/layouts/Layout.tsx b/BlitzDiffApp/app/core/layouts/Layout.tsx
similarity index 100%
rename from BlitzDiffApp/app/layouts/Layout.tsx
rename to BlitzDiffApp/app/core/layouts/Layout.tsx
diff --git a/BlitzDiffApp/app/pages/_app.tsx b/BlitzDiffApp/app/pages/_app.tsx
index 465065a31..d6f7b831e 100644
--- a/BlitzDiffApp/app/pages/_app.tsx
+++ b/BlitzDiffApp/app/pages/_app.tsx
@@ -1,5 +1,12 @@
-import { AppProps, ErrorComponent, useRouter, AuthenticationError, AuthorizationError } from "blitz"
-import { ErrorBoundary, FallbackProps } from "react-error-boundary"
+import {
+  AppProps,
+  ErrorComponent,
+  useRouter,
+  AuthenticationError,
+  AuthorizationError,
+  ErrorFallbackProps,
+} from "blitz"
+import { ErrorBoundary } from "react-error-boundary"
 import { queryCache } from "react-query"
 import LoginForm from "app/auth/components/LoginForm"
 
@@ -22,22 +29,19 @@ export default function App({ Component, pageProps }: AppProps) {
   )
 }
 
-function RootErrorFallback({ error, resetErrorBoundary }: FallbackProps) {
+function RootErrorFallback({ error, resetErrorBoundary }: ErrorFallbackProps) {
   if (error instanceof AuthenticationError) {
     return <LoginForm onSuccess={resetErrorBoundary} />
   } else if (error instanceof AuthorizationError) {
     return (
       <ErrorComponent
-        statusCode={(error as any).statusCode}
+        statusCode={error.statusCode}
         title="Sorry, you are not authorized to access this"
       />
     )
   } else {
     return (
-      <ErrorComponent
-        statusCode={(error as any)?.statusCode || 400}
-        title={error?.message || error?.name}
-      />
+      <ErrorComponent statusCode={error.statusCode || 400} title={error.message || error.name} />
     )
   }
 }
diff --git a/BlitzDiffApp/app/pages/index.test.tsx b/BlitzDiffApp/app/pages/index.test.tsx
index a22aedf36..9374c6024 100644
--- a/BlitzDiffApp/app/pages/index.test.tsx
+++ b/BlitzDiffApp/app/pages/index.test.tsx
@@ -1,11 +1,10 @@
-import React from "react"
 import { render } from "test/utils"
 
 import Home from "./index"
-import {useCurrentUser} from "app/hooks/useCurrentUser"
+import { useCurrentUser } from "app/core/hooks/useCurrentUser"
 
-jest.mock("app/hooks/useCurrentUser")
-const mockUseCurrentUser = useCurrentUser as jest.MockedFunction<typeof useCurrentUser>;
+jest.mock("app/core/hooks/useCurrentUser")
+const mockUseCurrentUser = useCurrentUser as jest.MockedFunction<typeof useCurrentUser>
 
 test.skip("renders blitz documentation link", () => {
   // This is an example of how to ensure a specific item is in the document
@@ -15,10 +14,10 @@ test.skip("renders blitz documentation link", () => {
   // This is an example on how to mock api hooks when testing
   mockUseCurrentUser.mockReturnValue({
     id: 1,
-    name: 'User',
-    email: 'user@email.com',
-    role: 'user'
-  });
+    name: "User",
+    email: "user@email.com",
+    role: "user",
+  })
 
   const { getByText } = render(<Home />)
   const linkElement = getByText(/Documentation/i)
diff --git a/BlitzDiffApp/app/pages/index.tsx b/BlitzDiffApp/app/pages/index.tsx
index 83d6d90dc..087d51d96 100644
--- a/BlitzDiffApp/app/pages/index.tsx
+++ b/BlitzDiffApp/app/pages/index.tsx
@@ -1,8 +1,8 @@
+import { Suspense } from "react"
 import { Link, BlitzPage, useMutation } from "blitz"
-import Layout from "app/layouts/Layout"
+import Layout from "app/core/layouts/Layout"
+import { useCurrentUser } from "app/core/hooks/useCurrentUser"
 import logout from "app/auth/mutations/logout"
-import { useCurrentUser } from "app/hooks/useCurrentUser"
-import { Suspense } from "react"
 
 /*
  * This file is just for a pleasant getting started page for your new app.
@@ -73,9 +73,7 @@ const Home: BlitzPage = () => {
         <pre>
           <code>blitz generate all project name:string</code>
         </pre>
-        <pre>
-          <code>blitz prisma migrate dev --preview-feature</code>
-        </pre>
+        <div style={{ marginBottom: "1rem" }}>(And select Yes to run prisma migrate)</div>
         <div>
           <p>
             Then <strong>restart the server</strong>
@@ -84,7 +82,7 @@ const Home: BlitzPage = () => {
             <code>Ctrl + c</code>
           </pre>
           <pre>
-            <code>blitz start</code>
+            <code>blitz dev</code>
           </pre>
           <p>
             and go to{" "}
@@ -112,11 +110,11 @@ const Home: BlitzPage = () => {
           </a>
           <a
             className="button-outline"
-            href="https://slack.blitzjs.com"
+            href="https://discord.blitzjs.com"
             target="_blank"
             rel="noopener noreferrer"
           >
-            Slack Community
+            Discord Community
           </a>
         </div>
       </main>
@@ -267,6 +265,7 @@ const Home: BlitzPage = () => {
   )
 }
 
+Home.suppressFirstRenderFlicker = true
 Home.getLayout = (page) => <Layout title="Home">{page}</Layout>
 
 export default Home
diff --git a/BlitzDiffApp/babel.config.js b/BlitzDiffApp/babel.config.js
index a14498291..dfdf62cea 100644
--- a/BlitzDiffApp/babel.config.js
+++ b/BlitzDiffApp/babel.config.js
@@ -1,4 +1,4 @@
 module.exports = {
-  presets: ["next/babel"],
+  presets: ["blitz/babel"],
   plugins: [],
 }
diff --git a/BlitzDiffApp/db/index.ts b/BlitzDiffApp/db/index.ts
index 9349d04db..a63b57b24 100644
--- a/BlitzDiffApp/db/index.ts
+++ b/BlitzDiffApp/db/index.ts
@@ -1,15 +1,7 @@
+import { enhancePrisma } from "blitz"
 import { PrismaClient } from "@prisma/client"
-export * from "@prisma/client"
-
-let prisma: PrismaClient
 
-if (process.env.NODE_ENV === "production") {
-    prisma = new PrismaClient()
-} else {
-    // Ensure the prisma instance is re-used during hot-reloading
-    // Otherwise, a new client will be created on every reload
-    globalThis["prisma"] = globalThis["prisma"] || new PrismaClient()
-    prisma = globalThis["prisma"]
-}
+const EnhancedPrisma = enhancePrisma(PrismaClient)
 
-export default prisma
+export * from "@prisma/client"
+export default new EnhancedPrisma()
diff --git a/BlitzDiffApp/db/migrations/20210306013217_initial_migration/migration.sql b/BlitzDiffApp/db/migrations/20210306005135_initial_migration/migration.sql
similarity index 60%
rename from BlitzDiffApp/db/migrations/20210306013217_initial_migration/migration.sql
rename to BlitzDiffApp/db/migrations/20210306005135_initial_migration/migration.sql
index f3028fb44..0b34cc718 100644
--- a/BlitzDiffApp/db/migrations/20210306013217_initial_migration/migration.sql
+++ b/BlitzDiffApp/db/migrations/20210306005135_initial_migration/migration.sql
@@ -6,7 +6,7 @@ CREATE TABLE "User" (
     "name" TEXT,
     "email" TEXT NOT NULL,
     "hashedPassword" TEXT,
-    "role" TEXT NOT NULL DEFAULT 'user'
+    "role" TEXT NOT NULL DEFAULT 'USER'
 );
 
 -- CreateTable
@@ -16,16 +16,32 @@ CREATE TABLE "Session" (
     "updatedAt" DATETIME NOT NULL,
     "expiresAt" DATETIME,
     "handle" TEXT NOT NULL,
-    "userId" INTEGER,
     "hashedSessionToken" TEXT,
     "antiCSRFToken" TEXT,
     "publicData" TEXT,
     "privateData" TEXT,
+    "userId" INTEGER,
     FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE
 );
 
+-- CreateTable
+CREATE TABLE "Token" (
+    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" DATETIME NOT NULL,
+    "hashedToken" TEXT NOT NULL,
+    "type" TEXT NOT NULL,
+    "expiresAt" DATETIME NOT NULL,
+    "sentTo" TEXT NOT NULL,
+    "userId" INTEGER NOT NULL,
+    FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
+);
+
 -- CreateIndex
 CREATE UNIQUE INDEX "User.email_unique" ON "User"("email");
 
 -- CreateIndex
 CREATE UNIQUE INDEX "Session.handle_unique" ON "Session"("handle");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "Token.hashedToken_type_unique" ON "Token"("hashedToken", "type");
diff --git a/BlitzDiffApp/db/migrations/migration_lock.toml b/BlitzDiffApp/db/migrations/migration_lock.toml
new file mode 100644
index 000000000..e5e5c4705
--- /dev/null
+++ b/BlitzDiffApp/db/migrations/migration_lock.toml
@@ -0,0 +1,3 @@
+# Please do not edit this file manually
+# It should be added in your version-control system (i.e. Git)
+provider = "sqlite"
\ No newline at end of file
diff --git a/BlitzDiffApp/db/schema.prisma b/BlitzDiffApp/db/schema.prisma
index f0bf356e7..1ad932610 100644
--- a/BlitzDiffApp/db/schema.prisma
+++ b/BlitzDiffApp/db/schema.prisma
@@ -13,26 +13,53 @@ generator client {
 // --------------------------------------
 
 model User {
-  id             Int       @default(autoincrement()) @id
-  createdAt      DateTime  @default(now())
-  updatedAt      DateTime  @updatedAt
+  id             Int      @id @default(autoincrement())
+  createdAt      DateTime @default(now())
+  updatedAt      DateTime @updatedAt
   name           String?
-  email          String    @unique
+  email          String   @unique
   hashedPassword String?
-  role           String    @default("user")
-  sessions       Session[]
+  role           String   @default("USER")
+
+  tokens   Token[]
+  sessions Session[]
 }
 
 model Session {
-  id                 Int       @default(autoincrement()) @id
+  id                 Int       @id @default(autoincrement())
   createdAt          DateTime  @default(now())
   updatedAt          DateTime  @updatedAt
   expiresAt          DateTime?
   handle             String    @unique
-  user               User?     @relation(fields: [userId], references: [id])
-  userId             Int?
   hashedSessionToken String?
   antiCSRFToken      String?
   publicData         String?
   privateData        String?
+
+  user   User? @relation(fields: [userId], references: [id])
+  userId Int?
 }
+
+model Token {
+  id          Int      @id @default(autoincrement())
+  createdAt   DateTime @default(now())
+  updatedAt   DateTime @updatedAt
+  hashedToken String
+  type        String
+  // See note below about TokenType enum
+  // type        TokenType
+  expiresAt   DateTime
+  sentTo      String
+
+  user   User @relation(fields: [userId], references: [id])
+  userId Int
+
+  @@unique([hashedToken, type])
+}
+
+// NOTE: It's highly recommended to use an enum for the token type
+//       but enums only work in Postgres.
+//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
+// enum TokenType {
+//   RESET_PASSWORD
+// }
diff --git a/BlitzDiffApp/jest.config.js b/BlitzDiffApp/jest.config.js
index b34f32872..297905551 100644
--- a/BlitzDiffApp/jest.config.js
+++ b/BlitzDiffApp/jest.config.js
@@ -1,31 +1,3 @@
-const { pathsToModuleNameMapper } = require("ts-jest/utils")
-const { compilerOptions } = require("./tsconfig")
-
 module.exports = {
-  // Test setup file
-  setupFilesAfterEnv: ["<rootDir>/test/setup.ts"],
-  // Add type checking to Typescript test files
-  preset: "ts-jest",
-  testEnvironment: "jest-environment-jsdom-fourteen",
-  // Automatically clear mock calls and instances between every test
-  clearMocks: true,
-  testPathIgnorePatterns: ["/node_modules/", "/.blitz/", "/.next/", "<rootDir>/db/migrations"],
-  transformIgnorePatterns: ["[/\\\\]node_modules[/\\\\].+\\.(ts|tsx)$"],
-  transform: {
-    "^.+\\.(ts|tsx)$": "babel-jest",
-  },
-  // This makes absolute imports work
-  moduleDirectories: ["node_modules", "<rootDir>"],
-  // Ignore the build directories
-  modulePathIgnorePatterns: ["<rootDir>/.blitz", "<rootDir>/.next"],
-  moduleNameMapper: {
-    // This ensures any path aliases in tsconfig also work in jest
-    ...pathsToModuleNameMapper(compilerOptions.paths || {}),
-    "\\.(css|less|sass|scss)$": "identity-obj-proxy",
-    "\\.(gif|ttf|eot|svg|png|jpg|jpeg)$": "<rootDir>/test/__mocks__/fileMock.js",
-  },
-  watchPlugins: ["jest-watch-typeahead/filename", "jest-watch-typeahead/testname"],
-  // Coverage output
-  coverageDirectory: ".coverage",
-  collectCoverageFrom: ["**/*.{js,jsx,ts,tsx}", "!**/*.d.ts", "!**/node_modules/**"],
+  preset: "blitz",
 }
diff --git a/BlitzDiffApp/app/layouts/.keep b/BlitzDiffApp/mailers/.keep
similarity index 100%
rename from BlitzDiffApp/app/layouts/.keep
rename to BlitzDiffApp/mailers/.keep
diff --git a/BlitzDiffApp/mailers/forgotPasswordMailer.ts b/BlitzDiffApp/mailers/forgotPasswordMailer.ts
new file mode 100644
index 000000000..2566359b9
--- /dev/null
+++ b/BlitzDiffApp/mailers/forgotPasswordMailer.ts
@@ -0,0 +1,45 @@
+/* TODO - You need to add a mailer integration in `integrations/` and import here.
+ *
+ * The integration file can be very simple. Instantiate the email client
+ * and then export it. That way you can import here and anywhere else
+ * and use it straight away.
+ */
+import previewEmail from "preview-email"
+
+type ResetPasswordMailer = {
+  to: string
+  token: string
+}
+
+export function forgotPasswordMailer({ to, token }: ResetPasswordMailer) {
+  // In production, set APP_ORIGIN to your production server origin
+  const origin = process.env.APP_ORIGIN || process.env.BLITZ_DEV_SERVER_ORIGIN
+  const resetUrl = `${origin}/reset-password?token=${token}`
+
+  const msg = {
+    from: "TODO@example.com",
+    to,
+    subject: "Your Password Reset Instructions",
+    html: `
+      <h1>Reset Your Password</h1>
+      <h3>NOTE: You must set up a production email integration in mailers/forgotPasswordMailer.ts</h3>
+
+      <a href="${resetUrl}">
+        Click here to set a new password
+      </a>
+    `,
+  }
+
+  return {
+    async send() {
+      if (process.env.NODE_ENV === "production") {
+        // TODO - send the production email, like this:
+        // await postmark.sendEmail(msg)
+        throw new Error("No production email implementation in mailers/forgotPasswordMailer")
+      } else {
+        // Preview email in the browser
+        await previewEmail(msg)
+      }
+    },
+  }
+}
diff --git a/BlitzDiffApp/package.json b/BlitzDiffApp/package.json
index cdcb71e60..2bf16e494 100644
--- a/BlitzDiffApp/package.json
+++ b/BlitzDiffApp/package.json
@@ -2,16 +2,14 @@
   "name": "BlitzDiffApp",
   "version": "1.0.0",
   "scripts": {
+    "dev": "blitz dev",
+    "build": "blitz build",
     "start": "blitz start",
     "studio": "blitz prisma studio",
-    "build": "blitz build",
     "lint": "eslint --ignore-path .gitignore --ext .js,.ts,.tsx .",
     "test": "jest",
     "test:watch": "jest --watch"
   },
-  "browserslist": [
-    "defaults"
-  ],
   "prisma": {
     "schema": "db/schema.prisma"
   },
@@ -31,42 +29,27 @@
     ]
   },
   "dependencies": {
-    "@prisma/cli": "~2.14",
-    "@prisma/client": "~2.14",
+    "prisma": "~2.17",
+    "@prisma/client": "~2.17",
     "blitz": "0.31.1",
     "react": "0.0.0-experimental-3310209d0",
     "react-dom": "0.0.0-experimental-3310209d0",
     "react-error-boundary": "3.1.1",
-    "typescript": "4.2.3",
+    "typescript": "~4.1",
     "zod": "1.11.11",
     "final-form": "4.20.2",
     "react-final-form": "6.5.2"
   },
   "devDependencies": {
-    "@testing-library/jest-dom": "5.11.9",
-    "@testing-library/react": "11.2.5",
-    "@testing-library/react-hooks": "3.7.0",
-    "@types/jest": "26.0.20",
     "@types/react": "17.0.2",
-    "@typescript-eslint/eslint-plugin": "4.16.1",
-    "@typescript-eslint/parser": "4.16.1",
-    "babel-eslint": "10.1.0",
+    "@types/preview-email": "2.0.0",
     "eslint": "7.21.0",
-    "eslint-config-react-app": "6.0.0",
-    "eslint-plugin-flowtype": "5.3.1",
-    "eslint-plugin-import": "2.22.1",
-    "eslint-plugin-jsx-a11y": "6.4.1",
-    "eslint-plugin-react": "7.22.0",
-    "eslint-plugin-react-hooks": "4.2.0",
     "husky": "4.3.8",
-    "jest": "26.6.3",
-    "jest-environment-jsdom-fourteen": "1.0.1",
-    "jest-watch-typeahead": "0.6.1",
-    "react-test-renderer": "17.0.1",
     "lint-staged": "10.5.4",
     "prettier": "2.2.1",
     "pretty-quick": "3.1.0",
-    "ts-jest": "26.5.3"
+    "preview-email": "3.0.3",
+    "prettier-plugin-prisma": "0.4.0"
   },
   "private": true
 }
diff --git a/BlitzDiffApp/test/.keep b/BlitzDiffApp/test/.keep
deleted file mode 100644
index e69de29bb..000000000
diff --git a/BlitzDiffApp/test/__mocks__/fileMock.js b/BlitzDiffApp/test/__mocks__/fileMock.js
deleted file mode 100644
index ebf20155e..000000000
--- a/BlitzDiffApp/test/__mocks__/fileMock.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = "test-file-stub"
diff --git a/BlitzDiffApp/test/setup.ts b/BlitzDiffApp/test/setup.ts
index 8f777a318..c278ddb9e 100644
--- a/BlitzDiffApp/test/setup.ts
+++ b/BlitzDiffApp/test/setup.ts
@@ -1,6 +1,4 @@
-// jest-dom adds custom jest matchers for asserting on DOM nodes.
-// allows you to do things like:
-// expect(element).toHaveTextContent(/react/i)
-// learn more: https://github.com/testing-library/jest-dom
-import "@testing-library/jest-dom/extend-expect"
-require("dotenv-flow").config({ silent: true })
+// This is the jest 'setupFilesAfterEnv' setup file
+// It's a good place to set globals, add global before/after hooks, etc
+
+export {} // so TS doesn't complain
diff --git a/BlitzDiffApp/test/utils.tsx b/BlitzDiffApp/test/utils.tsx
index 856e68186..4bdf86ac3 100644
--- a/BlitzDiffApp/test/utils.tsx
+++ b/BlitzDiffApp/test/utils.tsx
@@ -1,4 +1,3 @@
-import React from "react"
 import { RouterContext, BlitzRouter } from "blitz"
 import { render as defaultRender } from "@testing-library/react"
 import { renderHook as defaultRenderHook } from "@testing-library/react-hooks"
@@ -71,6 +70,7 @@ export const mockRouter: BlitzRouter = {
   params: {},
   query: {},
   isReady: true,
+  isLocaleDomain: false,
   push: jest.fn(),
   replace: jest.fn(),
   reload: jest.fn(),
diff --git a/BlitzDiffApp/tsconfig.json b/BlitzDiffApp/tsconfig.json
index e1d2226fa..c6d5bee62 100644
--- a/BlitzDiffApp/tsconfig.json
+++ b/BlitzDiffApp/tsconfig.json
@@ -18,6 +18,6 @@
     "incremental": true,
     "tsBuildInfoFile": ".tsbuildinfo"
   },
-  "exclude": ["node_modules"],
+  "exclude": ["node_modules", "**/*.e2e.ts", "cypress"],
   "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
 }
diff --git a/BlitzDiffApp/types.d.ts b/BlitzDiffApp/types.d.ts
new file mode 100644
index 000000000..d35eda64a
--- /dev/null
+++ b/BlitzDiffApp/types.d.ts
@@ -0,0 +1,8 @@
+declare module "*.module.scss" {
+  const content: { [className: string]: string }
+  export default content
+}
+declare module "*.module.css" {
+  const content: { [className: string]: string }
+  export default content
+}
diff --git a/BlitzDiffApp/types.ts b/BlitzDiffApp/types.ts
index 538d2d65e..cd9e61011 100644
--- a/BlitzDiffApp/types.ts
+++ b/BlitzDiffApp/types.ts
@@ -1,11 +1,19 @@
-import { DefaultCtx, SessionContext, DefaultPublicData } from "blitz"
+import { DefaultCtx, SessionContext } from "blitz"
+import { SimpleRolesIsAuthorized } from "@blitzjs/server"
 import { User } from "db"
 
+// Note: You should switch to Postgres and then use a DB enum for role type
+export type Role = "ADMIN" | "USER"
+
 declare module "blitz" {
   export interface Ctx extends DefaultCtx {
     session: SessionContext
   }
-  export interface PublicData extends DefaultPublicData {
-    userId: User["id"]
+  export interface Session {
+    isAuthorized: SimpleRolesIsAuthorized<Role>
+    PublicData: {
+      userId: User["id"]
+      role: Role
+    }
   }
 }
diff --git a/BlitzDiffApp/utils/.keep b/BlitzDiffApp/utils/.keep
deleted file mode 100644
index e69de29bb..000000000
