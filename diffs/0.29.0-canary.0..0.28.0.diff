diff --git a/BlitzDiffApp/app/auth/auth-utils.ts b/BlitzDiffApp/app/auth/auth-utils.ts
index c0e8a2d82..f5a851738 100644
--- a/BlitzDiffApp/app/auth/auth-utils.ts
+++ b/BlitzDiffApp/app/auth/auth-utils.ts
@@ -1,16 +1,37 @@
-import { SecurePassword, AuthenticationError } from "blitz"
+import { AuthenticationError } from "blitz"
+import SecurePassword from "secure-password"
 import db from "db"
 
+const SP = () => new SecurePassword()
+
+export const hashPassword = async (password: string) => {
+  const hashedBuffer = await SP().hash(Buffer.from(password))
+  return hashedBuffer.toString("base64")
+}
+export const verifyPassword = async (hashedPassword: string, password: string) => {
+  try {
+    return await SP().verify(Buffer.from(password), Buffer.from(hashedPassword, "base64"))
+  } catch (error) {
+    console.error(error)
+    return false
+  }
+}
+
 export const authenticateUser = async (email: string, password: string) => {
-  const user = await db.user.findFirst({ where: { email } })
-  if (!user) throw new AuthenticationError()
+  const user = await db.user.findFirst({ where: { email: email.toLowerCase() } })
 
-  const result = await SecurePassword.verify(user.hashedPassword, password)
+  if (!user || !user.hashedPassword) throw new AuthenticationError()
 
-  if (result === SecurePassword.VALID_NEEDS_REHASH) {
-    // Upgrade hashed password with a more secure hash
-    const improvedHash = await SecurePassword.hash(password)
-    await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })
+  switch (await verifyPassword(user.hashedPassword, password)) {
+    case SecurePassword.VALID:
+      break
+    case SecurePassword.VALID_NEEDS_REHASH:
+      // Upgrade hashed password with a more secure hash
+      const improvedHash = await hashPassword(password)
+      await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })
+      break
+    default:
+      throw new AuthenticationError()
   }
 
   const { hashedPassword, ...rest } = user
diff --git a/BlitzDiffApp/app/auth/mutations/signup.ts b/BlitzDiffApp/app/auth/mutations/signup.ts
index d4b152db4..65895fe0a 100644
--- a/BlitzDiffApp/app/auth/mutations/signup.ts
+++ b/BlitzDiffApp/app/auth/mutations/signup.ts
@@ -1,12 +1,13 @@
-import { Ctx, SecurePassword } from "blitz"
+import { Ctx } from "blitz"
 import db from "db"
+import { hashPassword } from "app/auth/auth-utils"
 import { SignupInput, SignupInputType } from "app/auth/validations"
 
 export default async function signup(input: SignupInputType, { session }: Ctx) {
   // This throws an error if input is invalid
   const { email, password } = SignupInput.parse(input)
 
-  const hashedPassword = await SecurePassword.hash(password)
+  const hashedPassword = await hashPassword(password)
   const user = await db.user.create({
     data: { email: email.toLowerCase(), hashedPassword, role: "user" },
     select: { id: true, name: true, email: true, role: true },
diff --git a/BlitzDiffApp/package.json b/BlitzDiffApp/package.json
index aa5c2c375..7a520a9db 100644
--- a/BlitzDiffApp/package.json
+++ b/BlitzDiffApp/package.json
@@ -33,10 +33,11 @@
   "dependencies": {
     "@prisma/cli": "~2.12",
     "@prisma/client": "~2.12",
-    "blitz": "0.30.0-canary.15",
+    "blitz": "0.31.1",
     "react": "0.0.0-experimental-3310209d0",
     "react-dom": "0.0.0-experimental-3310209d0",
     "react-error-boundary": "3.1.1",
+    "secure-password": "4.0.0",
     "typescript": "4.2.3",
     "zod": "1.11.11",
     "final-form": "4.20.2",
@@ -48,6 +49,7 @@
     "@testing-library/react-hooks": "3.7.0",
     "@types/jest": "26.0.20",
     "@types/react": "17.0.2",
+    "@types/secure-password": "3.1.0",
     "@typescript-eslint/eslint-plugin": "4.16.1",
     "@typescript-eslint/parser": "4.16.1",
     "babel-eslint": "10.1.0",
